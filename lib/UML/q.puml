@startuml
set namespaceSeparator ::

class "memofy::main.dart::MyApp" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "memofy::main.dart::MyApp"

class "memofy::validation::validation_item.dart::ValidationItem" {
  +String value
  +String? error
}

class "memofy::validation::text_validation.dart::TextValidation" {
  -ValidationItem _text
  +ValidationItem text
  +bool isValid
  +void changeNewTitle()
}

"memofy::validation::text_validation.dart::TextValidation" o-- "memofy::validation::validation_item.dart::ValidationItem"
"flutter::src::foundation::change_notifier.dart::ChangeNotifier" <|-- "memofy::validation::text_validation.dart::TextValidation"

class "memofy::data::subtask_service.dart::SubtaskService" {
  -Future<Box<SubtaskModel>> _box
  -Future<Box<TaskModel>> _boxTask
  -ValueListenable<Object>? _listenableBox
  +Future<void> load()
  +Future<List<SubtaskModel>> getSubtasks()
  +Future<void> addSubtask()
  +Future<void> removeSubtask()
  +Future<void> updateSubtask()
  +Future<void> toggleSubtaskStatus()
  +Future<TaskModel?> getTaskByKey()
  +Future<void> close()
}

"memofy::data::subtask_service.dart::SubtaskService" o-- "flutter::src::foundation::change_notifier.dart::ValueListenable<Object>"

class "memofy::data::box_manager.dart::BoxManager" {
  -Map<String, int> _counterBox
  {static} -BoxManager _singleton
  -Future<Box<T>> _openBox()
  +Future<Box<TaskModel>> openTaskBox()
  +String makeSubtaskBoxName()
  +Future<Box<SubtaskModel>> openSubtaskBox()
  +Future<Box<Settings>> openSettingsBox()
  +Future<void> closeBox()
}

"memofy::data::box_manager.dart::BoxManager" o-- "memofy::data::box_manager.dart::BoxManager"

class "memofy::data::task_service.dart::TaskService" {
  -Future<Box<TaskModel>> _box
  -ValueListenable<Object>? _listenableBox
  +Future<Box<TaskModel>> box
  +Future<void> load()
  +Future<TaskModel?> getTaskByKey()
  +Future<List<TaskModel>> getTasks()
  +Future<TaskModel> addTask()
  +Future<void> removeTask()
  +Future<void> updateTask()
  +Future<void> updateTaskColor()
  +Future<void> switchTaskNotification()
  +Future<void> updateTaskNotificationId()
  +Future<void> close()
}

"memofy::data::task_service.dart::TaskService" o-- "flutter::src::foundation::change_notifier.dart::ValueListenable<Object>"

class "memofy::data::settings_service.dart::SettingsService" {
  -Future<Box<Settings>> _box
  -ValueListenable<Object>? _listenableBox
  +Future<Box<Settings>> box
  +Future<void> load()
  +Future<Settings?> getSettingsByKey()
  +Future<Settings> addSettings()
  +Future<void> updateSettingsLang()
  +Future<void> close()
}

"memofy::data::settings_service.dart::SettingsService" o-- "flutter::src::foundation::change_notifier.dart::ValueListenable<Object>"

class "memofy::models::task::task_model.dart::TaskModel" {
  +String title
  +String date
  +String note
  +bool isDone
  +int orderby
  +String id
  +int colorValue
  +bool isNotificationOn
  +int notificationId
  +void toggleDone()
  +String toString()
}

"hive::src::object::hive_object.dart::HiveObject" <|-- "memofy::models::task::task_model.dart::TaskModel"

class "memofy::models::task::task_model.dart::TaskModelAdapter" {
  +int typeId
  +int hashCode
  +TaskModel read()
  +void write()
  +bool ==()
}

"hive::hive.dart::TypeAdapter" <|-- "memofy::models::task::task_model.dart::TaskModelAdapter"

class "memofy::models::task::task_model.dart::TaskModel" {
  +String title
  +String date
  +String note
  +bool isDone
  +int orderby
  +String id
  +int colorValue
  +bool isNotificationOn
  +int notificationId
  +void toggleDone()
  +String toString()
}

"hive::src::object::hive_object.dart::HiveObject" <|-- "memofy::models::task::task_model.dart::TaskModel"

class "memofy::models::task::task_model.dart::TaskModelAdapter" {
  +int typeId
  +int hashCode
  +TaskModel read()
  +void write()
  +bool ==()
}

"hive::hive.dart::TypeAdapter" <|-- "memofy::models::task::task_model.dart::TaskModelAdapter"

class "memofy::models::subtask::subtask_model.dart::SubtaskModel" {
  +String description
  +bool isDone
  +int orderby
  +String toString()
  +void toggleDone()
}

"hive::src::object::hive_object.dart::HiveObject" <|-- "memofy::models::subtask::subtask_model.dart::SubtaskModel"

class "memofy::models::subtask::subtask_model.dart::SubtaskModelAdapter" {
  +int typeId
  +int hashCode
  +SubtaskModel read()
  +void write()
  +bool ==()
}

"hive::hive.dart::TypeAdapter" <|-- "memofy::models::subtask::subtask_model.dart::SubtaskModelAdapter"

class "memofy::models::subtask::subtask_model.dart::SubtaskModel" {
  +String description
  +bool isDone
  +int orderby
  +String toString()
  +void toggleDone()
}

"hive::src::object::hive_object.dart::HiveObject" <|-- "memofy::models::subtask::subtask_model.dart::SubtaskModel"

class "memofy::models::subtask::subtask_model.dart::SubtaskModelAdapter" {
  +int typeId
  +int hashCode
  +SubtaskModel read()
  +void write()
  +bool ==()
}

"hive::hive.dart::TypeAdapter" <|-- "memofy::models::subtask::subtask_model.dart::SubtaskModelAdapter"

class "memofy::models::settings::settings.dart::Settings" {
  +String lang
  +String toString()
}

"hive::src::object::hive_object.dart::HiveObject" <|-- "memofy::models::settings::settings.dart::Settings"

class "memofy::models::settings::settings.dart::SettingsAdapter" {
  +int typeId
  +int hashCode
  +Settings read()
  +void write()
  +bool ==()
}

"hive::hive.dart::TypeAdapter" <|-- "memofy::models::settings::settings.dart::SettingsAdapter"

class "memofy::models::settings::settings.dart::Settings" {
  +String lang
  +String toString()
}

"hive::src::object::hive_object.dart::HiveObject" <|-- "memofy::models::settings::settings.dart::Settings"

class "memofy::models::settings::settings.dart::SettingsAdapter" {
  +int typeId
  +int hashCode
  +Settings read()
  +void write()
  +bool ==()
}

"hive::hive.dart::TypeAdapter" <|-- "memofy::models::settings::settings.dart::SettingsAdapter"

class "memofy::view_models::task::task_view_model.dart::TasksViewModel" {
  +String searchingQuery
  +TaskService taskService
  +Color tileColor
  -List<TaskModel> _tasks
  -List<TaskModel> _temp
  +List<TaskModel> tasks
  +List<TaskModel> get()
  -Future<void> _readTasksFromHive()
  +Future<void> load()
  +Future<void> addTask()
  +void searchTask()
  +Future<void> removeTask()
  +Future<void> updateTask()
  +Future<void> updateTaskColor()
  +Future<void> switchTaskNotification()
  +Future<void> updateTaskNotificationId()
  +void dispose()
}

"memofy::view_models::task::task_view_model.dart::TasksViewModel" o-- "memofy::data::task_service.dart::TaskService"
"memofy::view_models::task::task_view_model.dart::TasksViewModel" o-- "dart::ui::Color"
"flutter::src::foundation::change_notifier.dart::ChangeNotifier" <|-- "memofy::view_models::task::task_view_model.dart::TasksViewModel"

class "memofy::view_models::done_task::done_task_view_model.dart::DoneTasksViewModel" {
  +String searchingQuery
  +TaskService taskService
  -List<TaskModel> _doneTasks
  -List<TaskModel> _temp
  +List<TaskModel> doneTasks
  +List<TaskModel> get()
  -Future<void> _readDoneTasksFromHive()
  +void load()
  +void searchTask()
  +Future<void> removeTask()
  +void dispose()
}

"memofy::view_models::done_task::done_task_view_model.dart::DoneTasksViewModel" o-- "memofy::data::task_service.dart::TaskService"
"flutter::src::foundation::change_notifier.dart::ChangeNotifier" <|-- "memofy::view_models::done_task::done_task_view_model.dart::DoneTasksViewModel"

class "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel" {
  +TaskModel taskModel
  +SubtaskService subtaskService
  -List<SubtaskModel> _subtasks
  +List<SubtaskModel> subtasks
  -dynamic _readSubtasksFromHive()
  +void load()
  +Future<void> addSubtask()
  +Future<void> removeSubtask()
  +Future<void> updateSubtask()
  +void toggleSubtaskStatus()
  -bool _isAllSubtaskDone()
  +Future<void> isTaskDone()
  +void dispose()
}

"memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel" o-- "memofy::models::task::task_model.dart::TaskModel"
"memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel" o-- "memofy::data::subtask_service.dart::SubtaskService"
"flutter::src::foundation::change_notifier.dart::ChangeNotifier" <|-- "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel"

class "memofy::view_models::settings::settings_view_model.dart::SettingsViewModel" {
  +SettingsService settingsService
  +Settings settings
  -Future<void> _readSettingsFromHive()
  +Settings getSettings()
  +Future<void> load()
  +Future<void> updateSettingsLang()
}

"memofy::view_models::settings::settings_view_model.dart::SettingsViewModel" o-- "memofy::data::settings_service.dart::SettingsService"
"memofy::view_models::settings::settings_view_model.dart::SettingsViewModel" o-- "memofy::models::settings::settings.dart::Settings"
"flutter::src::foundation::change_notifier.dart::ChangeNotifier" <|-- "memofy::view_models::settings::settings_view_model.dart::SettingsViewModel"

class "memofy::view_models::speech::speech_view_model.dart::SpeechViewModel" {
  {static} +String TITLE
  {static} +String NOTE
  -String _title
  -String _note
  {static} -List<LocaleName> _localeNames
  -String _langId
  +String title
  +String note
  +void setData()
  +String getData()
  +void setLocaleNames()
  +List<LocaleName> getLocaleNames()
  +void setLangId()
  +String getLangId()
}

"flutter::src::foundation::change_notifier.dart::ChangeNotifier" <|-- "memofy::view_models::speech::speech_view_model.dart::SpeechViewModel"

class "memofy::presentation::widgets::task::task_tile_widget.dart::TaskTileWidget" {
  +TaskModel task
  +State<TaskTileWidget> createState()
}

"memofy::presentation::widgets::task::task_tile_widget.dart::TaskTileWidget" o-- "memofy::models::task::task_model.dart::TaskModel"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::widgets::task::task_tile_widget.dart::TaskTileWidget"

class "memofy::presentation::widgets::task::task_tile_widget.dart::_TaskTileWidgetState" {
  +Color pickerColor
  +int pickerColor_value
  +int pickerCol
  +void changeColor()
  +void initState()
  +void listenNotification()
  +void onClickedNotification()
  +Widget build()
  +Widget slidableTile()
  +void editTask()
  +void showSettingColorDialog()
  +void settingDialog()
  +int intGenerator()
}

"memofy::presentation::widgets::task::task_tile_widget.dart::_TaskTileWidgetState" o-- "dart::ui::Color"
"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::widgets::task::task_tile_widget.dart::_TaskTileWidgetState"

class "memofy::presentation::widgets::mic::add_by_mic.dart::AddByMic" {
  +String info
  +bool isListening
  +_AddByMicState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::widgets::mic::add_by_mic.dart::AddByMic"

class "memofy::presentation::widgets::mic::add_by_mic.dart::_AddByMicState" {
  +Widget build()
  +Future<dynamic> toggleRecording()
}

"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::widgets::mic::add_by_mic.dart::_AddByMicState"

class "memofy::presentation::widgets::tasks_list::tasks_list_widget.dart::TasksListWidget" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "memofy::presentation::widgets::tasks_list::tasks_list_widget.dart::TasksListWidget"

class "memofy::presentation::widgets::done_tasks::done_tasks_list_widget.dart::DoneTasksListWidget" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "memofy::presentation::widgets::done_tasks::done_tasks_list_widget.dart::DoneTasksListWidget"

class "memofy::presentation::widgets::subtasks_list::subtasks_list_widget.dart::SubtasksListWidget" {
  +_SubtasksListWidgetState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::widgets::subtasks_list::subtasks_list_widget.dart::SubtasksListWidget"

class "memofy::presentation::widgets::subtasks_list::subtasks_list_widget.dart::_SubtasksListWidgetState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::widgets::subtasks_list::subtasks_list_widget.dart::_SubtasksListWidgetState"

class "memofy::presentation::widgets::subtask::subtask_tile_widget.dart::SubtaskTileWidget" {
  +SubtaskModel subtask
  +SubtasksViewModel subtasksViewModel
  +Widget build()
  +Widget slidableTile()
  +void editSubtask()
}

"memofy::presentation::widgets::subtask::subtask_tile_widget.dart::SubtaskTileWidget" o-- "memofy::models::subtask::subtask_model.dart::SubtaskModel"
"memofy::presentation::widgets::subtask::subtask_tile_widget.dart::SubtaskTileWidget" o-- "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "memofy::presentation::widgets::subtask::subtask_tile_widget.dart::SubtaskTileWidget"

class "memofy::presentation::screens::mic_add_task::mic_add_task_screen.dart::MicAddTaskScreen" {
  {static} +String id
  +String info
  +_MicAddTaskScreenState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::screens::mic_add_task::mic_add_task_screen.dart::MicAddTaskScreen"

class "memofy::presentation::screens::mic_add_task::mic_add_task_screen.dart::_MicAddTaskScreenState" {
  +String? selectedItem
  +void initState()
  +Widget build()
  +void showErrorDialog()
  +void showSettingDialog()
}

"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::screens::mic_add_task::mic_add_task_screen.dart::_MicAddTaskScreenState"

class "memofy::presentation::screens::tasks_list::tasks_list_screen.dart::TasksListScreen" {
  {static} +String id
  +_TasksListScreenState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::screens::tasks_list::tasks_list_screen.dart::TasksListScreen"

class "memofy::presentation::screens::tasks_list::tasks_list_screen.dart::_TasksListScreenState" {
  -TextEditingController _searchController
  +bool isSearching
  +String searchingQuery
  +void initState()
  +Widget build()
  +Widget searchField()
}

"memofy::presentation::screens::tasks_list::tasks_list_screen.dart::_TasksListScreenState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::screens::tasks_list::tasks_list_screen.dart::_TasksListScreenState"

class "memofy::presentation::screens::done_tasks::done_tasks_list_screen.dart::DoneTasksListScreen" {
  {static} +String id
  +_DoneTasksListScreenState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::screens::done_tasks::done_tasks_list_screen.dart::DoneTasksListScreen"

class "memofy::presentation::screens::done_tasks::done_tasks_list_screen.dart::_DoneTasksListScreenState" {
  -TextEditingController _searchController
  +bool isSearching
  +Widget build()
  +Widget searchField()
}

"memofy::presentation::screens::done_tasks::done_tasks_list_screen.dart::_DoneTasksListScreenState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::screens::done_tasks::done_tasks_list_screen.dart::_DoneTasksListScreenState"

class "memofy::presentation::screens::add_task::add_task_screen.dart::AddTaskScreen" {
  {static} +String id
  +String newTitle
  +String date
  +String newNote
  +TextValidation validationService
  +Widget build()
  +Widget AddTitleInput()
  +Widget AddNoteInput()
  +Widget submitButton()
}

"memofy::presentation::screens::add_task::add_task_screen.dart::AddTaskScreen" o-- "memofy::validation::text_validation.dart::TextValidation"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "memofy::presentation::screens::add_task::add_task_screen.dart::AddTaskScreen"

class "memofy::presentation::screens::edit_subtask::edit_subtask_screen.dart::EditSubtaskScreen" {
  {static} +String id
  +SubtaskModel subtask
  +SubtasksViewModel subtasksViewModel
  +State<EditSubtaskScreen> createState()
}

"memofy::presentation::screens::edit_subtask::edit_subtask_screen.dart::EditSubtaskScreen" o-- "memofy::models::subtask::subtask_model.dart::SubtaskModel"
"memofy::presentation::screens::edit_subtask::edit_subtask_screen.dart::EditSubtaskScreen" o-- "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::screens::edit_subtask::edit_subtask_screen.dart::EditSubtaskScreen"

class "memofy::presentation::screens::edit_subtask::edit_subtask_screen.dart::_EditSubtaskScreenState" {
  +String description
  -SubtasksViewModel? _subtasksViewModel
  +TextValidation validationService
  +void initState()
  +Widget build()
  +Widget EditDescriptionInput()
  +Widget submitButton()
}

"memofy::presentation::screens::edit_subtask::edit_subtask_screen.dart::_EditSubtaskScreenState" o-- "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel"
"memofy::presentation::screens::edit_subtask::edit_subtask_screen.dart::_EditSubtaskScreenState" o-- "memofy::validation::text_validation.dart::TextValidation"
"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::screens::edit_subtask::edit_subtask_screen.dart::_EditSubtaskScreenState"

class "memofy::presentation::screens::subtasks_list::subtasks_list_screen.dart::SubtasksListScreen" {
  {static} +String id
  +TaskModel taskModel
  +_SubtasksListScreenState createState()
}

"memofy::presentation::screens::subtasks_list::subtasks_list_screen.dart::SubtasksListScreen" o-- "memofy::models::task::task_model.dart::TaskModel"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::screens::subtasks_list::subtasks_list_screen.dart::SubtasksListScreen"

class "memofy::presentation::screens::subtasks_list::subtasks_list_screen.dart::_SubtasksListScreenState" {
  -SubtasksViewModel? _subtaskViewModel
  +void initState()
  +Widget build()
}

"memofy::presentation::screens::subtasks_list::subtasks_list_screen.dart::_SubtasksListScreenState" o-- "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel"
"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::screens::subtasks_list::subtasks_list_screen.dart::_SubtasksListScreenState"

class "memofy::presentation::screens::edit_task::edit_task_screen.dart::EditTaskScreen" {
  {static} +String id
  +TaskModel task
  +State<EditTaskScreen> createState()
}

"memofy::presentation::screens::edit_task::edit_task_screen.dart::EditTaskScreen" o-- "memofy::models::task::task_model.dart::TaskModel"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::screens::edit_task::edit_task_screen.dart::EditTaskScreen"

class "memofy::presentation::screens::edit_task::edit_task_screen.dart::_EditTaskScreenState" {
  +TextValidation validationService
  +String title
  +List<dynamic> dateTime
  +String note
  +String tempDate
  +void initState()
  +Widget build()
  +Widget EditTitleInput()
  +Widget EditNoteInput()
  +Widget submitButton()
}

"memofy::presentation::screens::edit_task::edit_task_screen.dart::_EditTaskScreenState" o-- "memofy::validation::text_validation.dart::TextValidation"
"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::screens::edit_task::edit_task_screen.dart::_EditTaskScreenState"

class "memofy::presentation::screens::mic_add_subtask::mic_add_subtask_screen.dart::MicAddSubtaskScreen" {
  {static} +String id
  +String info
  +SubtasksViewModel subtasksViewModel
  +_MicAddSubtaskScreenState createState()
}

"memofy::presentation::screens::mic_add_subtask::mic_add_subtask_screen.dart::MicAddSubtaskScreen" o-- "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::screens::mic_add_subtask::mic_add_subtask_screen.dart::MicAddSubtaskScreen"

class "memofy::presentation::screens::mic_add_subtask::mic_add_subtask_screen.dart::_MicAddSubtaskScreenState" {
  -SubtasksViewModel? _subtaskDatamodel
  +void initState()
  +Widget build()
  +void showErrorDialog()
}

"memofy::presentation::screens::mic_add_subtask::mic_add_subtask_screen.dart::_MicAddSubtaskScreenState" o-- "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel"
"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::screens::mic_add_subtask::mic_add_subtask_screen.dart::_MicAddSubtaskScreenState"

class "memofy::presentation::screens::add_subtask::add_subtask_screen.dart::AddSubtaskScreen" {
  {static} +String id
  +SubtasksViewModel subtasksViewModel
  +State<AddSubtaskScreen> createState()
}

"memofy::presentation::screens::add_subtask::add_subtask_screen.dart::AddSubtaskScreen" o-- "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::screens::add_subtask::add_subtask_screen.dart::AddSubtaskScreen"

class "memofy::presentation::screens::add_subtask::add_subtask_screen.dart::_AddSubtaskScreenState" {
  +String description
  -SubtasksViewModel? _subtaskDatamodel
  +TextValidation validationService
  +void initState()
  +Widget build()
  +Widget AddDescriptionInput()
  +Widget submitButton()
}

"memofy::presentation::screens::add_subtask::add_subtask_screen.dart::_AddSubtaskScreenState" o-- "memofy::view_models::subtask::subtask_view_model.dart::SubtasksViewModel"
"memofy::presentation::screens::add_subtask::add_subtask_screen.dart::_AddSubtaskScreenState" o-- "memofy::validation::text_validation.dart::TextValidation"
"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::screens::add_subtask::add_subtask_screen.dart::_AddSubtaskScreenState"

class "memofy::presentation::screens::home::home_page_screen.dart::HomePageScreen" {
  {static} +String id
  +_HomePageScreenState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "memofy::presentation::screens::home::home_page_screen.dart::HomePageScreen"

class "memofy::presentation::screens::home::home_page_screen.dart::_HomePageScreenState" {
  +int selectedIndex
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "memofy::presentation::screens::home::home_page_screen.dart::_HomePageScreenState"

class "memofy::notification_api::notification_api.dart::NotificationApi" {
  {static} -FlutterLocalNotificationsPlugin _notification
  {static} +BehaviorSubject<String?> onNotifications
  {static} -Future<dynamic> _notificationDetails()
  {static} +Future<dynamic> init()
  {static} +Future<dynamic> showNotification()
  {static} +Future<dynamic> showScheduledNotification()
  {static} +void cancel()
  {static} +void cancelAll()
}

"memofy::notification_api::notification_api.dart::NotificationApi" o-- "flutter_local_notifications::src::flutter_local_notifications_plugin.dart::FlutterLocalNotificationsPlugin"
"memofy::notification_api::notification_api.dart::NotificationApi" o-- "rxdart::src::subjects::behavior_subject.dart::BehaviorSubject<String>"

class "memofy::speech_api::speech_api.dart::SpeechApi" {
  {static} -String _langId
  {static} -SpeechToText _speech
  {static} +Future<bool> toggleRecording()
}

"memofy::speech_api::speech_api.dart::SpeechApi" o-- "speech_to_text::speech_to_text.dart::SpeechToText"


@enduml
